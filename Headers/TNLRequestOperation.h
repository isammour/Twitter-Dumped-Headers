//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <TwitterNetworkLayer/TNLSafeOperation.h>

#import <TwitterNetworkLayer/TNLURLSessionTaskOperationDelegate-Protocol.h>

@class NSDictionary, NSError, NSMutableArray, NSMutableURLRequest, NSObject, NSString, NSURLRequest, TNLRequestConfiguration, TNLRequestOperationQueue, TNLResponse, TNLResponseMetrics, TNLURLSessionTaskOperation;
@protocol OS_dispatch_queue, OS_dispatch_source, TNLHostSanitizer, TNLRequest, TNLRequestDelegate;

@interface TNLRequestOperation : TNLSafeOperation <TNLURLSessionTaskOperationDelegate>
{
    NSObject<OS_dispatch_queue> *_callbackQueue;
    NSObject<OS_dispatch_queue> *_retryPolicyQueue;
    NSObject<OS_dispatch_queue> *_completionQueue;
    long long _enqueuedPriority;
    NSMutableArray *_callbackTagStack;
    unsigned long long _mach_callbackTagTime;
    NSError *_cachedCancel;
    id <TNLRequestDelegate> _strongDelegate;
    unsigned long long _backgroundTaskIdentifier;
    double _cloggedCallbackTimeout;
    // Error parsing type: Aq, name: _state
    NSMutableURLRequest *_scratchURLRequest;
    id <TNLHostSanitizer> _hostSanitizer;
    NSObject<OS_dispatch_source> *_retryDelayTimerSource;
    NSObject<OS_dispatch_source> *_operationTimeoutTimerSource;
    NSObject<OS_dispatch_source> *_attemptTimeoutTimerSource;
    NSObject<OS_dispatch_source> *_callbackTimeoutTimerSource;
    unsigned long long _callbackTimeoutTimerStartMachTime;
    unsigned long long _callbackTimeoutTimerPausedMachTime;
    struct {
        unsigned int didEnqueue:1;
        unsigned int didStart:1;
        unsigned int didPrep:1;
        unsigned int inRetryCheck:1;
        unsigned int silentStart:1;
        unsigned int isCallbackClogDetectionEnabled:1;
        unsigned int isObservingApplicationStates:1;
        unsigned int applicationIsInBackground:1;
        unsigned int invalidSessionRetryCount:4;
    } _backgroundFlags;
    NSObject<OS_dispatch_queue> *_URLSessionTaskOperationAtomicQueue;
    TNLURLSessionTaskOperation *_URLSessionTaskOperation;
    // Error parsing type: AB, name: _didCompleteFinishedCallback
    float _downloadProgress;
    float _uploadProgress;
    long long _operationId;
    TNLRequestOperationQueue *_requestOperationQueue;
    TNLRequestConfiguration *_requestConfiguration;
    id <TNLRequestDelegate> _requestDelegate;
    id <TNLRequest> _originalRequest;
    id <TNLRequest> _hydratedRequest;
    Class _responseClass;
    id _context;
    TNLResponseMetrics *_metrics;
    NSString *_cachedDelegateClassName;
    NSError *_terminalErrorOverride;
    TNLResponse *_internalFinalResponse;
    NSDictionary *_additionalDecoders;
    NSURLRequest *_hydratedURLRequest;
    long long _internalPriority;
}

+ (id)operationWithRequest:(id)arg1 responseClass:(Class)arg2 configuration:(id)arg3 delegate:(id)arg4;
+ (id)operationWithRequest:(id)arg1 responseClass:(Class)arg2 configuration:(id)arg3 completion:(CDUnknownBlockType)arg4;
+ (id)operationWithRequest:(id)arg1 configuration:(id)arg2 completion:(CDUnknownBlockType)arg3;
+ (id)operationWithRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
+ (id)operationWithURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
+ (id)operationWithURL:(id)arg1 configuration:(id)arg2 delegate:(id)arg3;
+ (id)operationWithRequest:(id)arg1 configuration:(id)arg2 delegate:(id)arg3;
@property long long internalPriority; // @synthesize internalPriority=_internalPriority;
@property(copy) NSURLRequest *hydratedURLRequest; // @synthesize hydratedURLRequest=_hydratedURLRequest;
@property(copy) NSDictionary *additionalDecoders; // @synthesize additionalDecoders=_additionalDecoders;
@property(retain) TNLResponse *internalFinalResponse; // @synthesize internalFinalResponse=_internalFinalResponse;
@property(retain) NSError *terminalErrorOverride; // @synthesize terminalErrorOverride=_terminalErrorOverride;
@property(copy) NSString *cachedDelegateClassName; // @synthesize cachedDelegateClassName=_cachedDelegateClassName;
@property(readonly, nonatomic) TNLResponseMetrics *metrics; // @synthesize metrics=_metrics;
@property(retain, nonatomic) id context; // @synthesize context=_context;
@property(nonatomic) float uploadProgress; // @synthesize uploadProgress=_uploadProgress;
@property(nonatomic) float downloadProgress; // @synthesize downloadProgress=_downloadProgress;
@property(readonly) Class responseClass; // @synthesize responseClass=_responseClass;
@property(retain, nonatomic) id <TNLRequest> hydratedRequest; // @synthesize hydratedRequest=_hydratedRequest;
@property(readonly, nonatomic) id <TNLRequest> originalRequest; // @synthesize originalRequest=_originalRequest;
@property(readonly, nonatomic) __weak id <TNLRequestDelegate> requestDelegate; // @synthesize requestDelegate=_requestDelegate;
@property(readonly, nonatomic) TNLRequestConfiguration *requestConfiguration; // @synthesize requestConfiguration=_requestConfiguration;
@property(retain, nonatomic) TNLRequestOperationQueue *requestOperationQueue; // @synthesize requestOperationQueue=_requestOperationQueue;
@property(readonly, nonatomic) long long operationId; // @synthesize operationId=_operationId;
- (void).cxx_destruct;
- (void)start;
- (_Bool)isExecuting;
- (_Bool)isCancelled;
- (_Bool)isFinished;
- (_Bool)isAsynchronous;
- (_Bool)isConcurrent;
- (void)cancelWithSource:(id)arg1 underlyingError:(id)arg2;
- (void)cancelWithSource:(id)arg1;
- (void)cancel;
- (void)waitUntilFinishedWithoutBlockingRunLoop;
- (void)waitUntilFinished;
- (void)network_URLSessionTaskOperation:(id)arg1 didStartSessionTaskWithRequest:(id)arg2;
- (void)network_URLSessionTaskOperation:(id)arg1 didTransitionToState:(long long)arg2 withResponse:(id)arg3;
- (void)network_URLSessionTaskOperation:(id)arg1 finalizeWithResponseInfo:(id)arg2 responseError:(id)arg3 metaData:(id)arg4 taskMetrics:(id)arg5 completion:(CDUnknownBlockType)arg6;
- (void)network_URLSessionTaskOperation:(id)arg1 didStartBackgroundTaskWithTaskIdentifier:(unsigned long long)arg2 configIdentifier:(id)arg3 sharedContainerIdentifier:(id)arg4;
- (void)network_URLSessionTaskOperation:(id)arg1 appendReceivedData:(id)arg2;
- (void)network_URLSessionTaskOperation:(id)arg1 didUpdateDownloadProgress:(float)arg2;
- (void)network_URLSessionTaskOperation:(id)arg1 didUpdateUploadProgress:(float)arg2;
- (void)network_URLSessionTaskOperation:(id)arg1 redirectFromRequest:(id)arg2 withHTTPResponse:(id)arg3 to:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)network_notifyHostSanitizedFromHost:(id)arg1 toHost:(id)arg2;
- (void)network_URLSessionTaskOperation:(id)arg1 redirectedFrom:(id)arg2 withHTTPResponse:(id)arg3 to:(id)arg4 metaData:(id)arg5;
- (void)network_URLSessionTaskOperation:(id)arg1 willPerformRedirectFromRequest:(id)arg2 withHTTPResponse:(id)arg3 toRequest:(id)arg4 redirectPolicy:(long long)arg5 completion:(CDUnknownBlockType)arg6;
- (void)network_URLSessionTaskOperation:(id)arg1 willPerformRedirectFromRequest:(id)arg2 withHTTPResponse:(id)arg3 toRequest:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)network_URLSessionTaskOperation:(id)arg1 didReceiveURLResponse:(id)arg2;
@property long long priority;
- (long long)qualityOfService;
- (long long)queuePriority;
@property(readonly) long long responseSource;
- (id)URLResponse;
- (id)currentURLRequest;
@property(readonly, nonatomic) unsigned long long redirectCount;
@property(readonly, nonatomic) unsigned long long retryCount;
@property(readonly, nonatomic) unsigned long long attemptCount;
@property(readonly) TNLResponse *response;
@property(readonly) NSError *error;
- (void)_tnl_setState:(long long)arg1;
- (void)setState:(long long)arg1 async:(_Bool)arg2;
@property(readonly, nonatomic) long long state;
@property(readonly) long long executionMode;
@property(readonly, nonatomic) id <TNLRequestDelegate> internalDelegate;
@property(retain) TNLURLSessionTaskOperation *URLSessionTaskOperation;
- (void)enqueueToOperationQueue:(id)arg1;
- (void)dealloc;
- (_Bool)dealloc_isObservingApplicationStates;
- (unsigned long long)dealloc_backgroundTaskIdentifier;
- (id)initWithRequest:(id)arg1 responseClass:(Class)arg2 configuration:(id)arg3 delegate:(id)arg4;
- (id)init;
- (void)network_endBackgroundTask;
- (void)network_startBackgroundTask;
- (void)network_stopObservingApplicationStates;
- (void)network_startObservingApplicationStates;
- (void)network_didBecomeActive;
- (void)network_willResignActive;
- (void)private_didBecomeActive:(id)arg1;
- (void)private_willResignActive:(id)arg1;
- (void)private_emptyMethod;
- (void)network_attemptTimeoutTimerDidFire;
- (void)network_invalidateAttemptTimeoutTimer;
- (void)network_startAttemptTimeoutTimer:(double)arg1;
- (void)network_unpauseCallbackTimer;
- (void)network_pauseCallbackTimer;
- (void)network_callbackTimerFired;
- (void)network_startCallbackTimerIfNecessary;
- (void)network_stopCallbackTimer;
- (void)network_startCallbackTimer:(double)arg1;
- (void)network_operationTimeoutTimerDidFire;
- (void)network_invalidateOperationTimeoutTimer;
- (void)network_startOperationTimeoutTimer:(double)arg1;
- (void)network_retryTimerDidFireWithOldResponse:(id)arg1;
- (void)network_invalidateRetryTimer;
- (void)network_startRetryTimer:(double)arg1 withOldResponse:(id)arg2;
- (void)network_retryDuringTransitionFromState:(long long)arg1 toState:(long long)arg2 attemptResponse:(id)arg3 retryPolicyProvider:(id)arg4;
- (void)network_attemptRetryDuringTransitionFromState:(long long)arg1 toState:(long long)arg2 attemptResponse:(id)arg3;
- (void)network_forciblyRetryInvalidatedURLSessionRequestFromAttemptResponse:(id)arg1;
- (_Bool)network_shouldForciblyRetryInvalidatedURLSessionRequestFromAttemptResponse:(id)arg1;
- (_Bool)network_shouldAttemptRetryDuringTransitionFromState:(long long)arg1 toState:(long long)arg2 attemptResponse:(id)arg3;
- (id)network_buildResponseWithResponseInfo:(id)arg1 responseError:(id)arg2 metaData:(id)arg3 taskMetrics:(id)arg4;
- (id)network_finalizeResponseWithResponseInfo:(id)arg1 responseError:(id)arg2 metaData:(id)arg3 taskMetrics:(id)arg4;
- (id)private_logContextStringForState:(long long)arg1 response:(id)arg2;
- (void)internal_finalizeCompletion;
- (void)network_completeWithResponse:(id)arg1;
- (void)network_didCompleteAttempt:(id)arg1 disposition:(long long)arg2;
- (void)network_updateMetricsFromState:(long long)arg1 toState:(long long)arg2 attemptResponse:(id)arg3;
- (void)network_completeTransitionFromState:(long long)arg1 toState:(long long)arg2 attemptResponse:(id)arg3;
- (void)network_transitionToState:(long long)arg1 attemptResponse:(id)arg2;
- (void)network_cleanupAfterComplete;
- (void)network_start;
- (void)network_prepareToStart;
- (void)network_retryWithOldResponse:(id)arg1;
- (void)network_fail:(id)arg1;
- (void)network_connect;
- (void)network_prepareToConnectThenConnect;
- (void)network_cementScratchURLRequest:(CDUnknownBlockType)arg1;
- (void)network_authorizeScratchURLRequest:(CDUnknownBlockType)arg1;
- (void)network_sanitizeHostForScratchURLRequest:(CDUnknownBlockType)arg1;
- (void)network_applyContentEncodingToScratchURLRequest:(CDUnknownBlockType)arg1;
- (void)network_applyAcceptEncodingsToScratchURLRequest:(CDUnknownBlockType)arg1;
- (void)network_applyGlobalHeadersToScratchURLRequest:(CDUnknownBlockType)arg1;
- (void)network_validateConfiguration:(CDUnknownBlockType)arg1;
- (void)network_convertHydratedRequestToScratchURLRequest:(CDUnknownBlockType)arg1;
- (void)network_validateHydratedRequest:(CDUnknownBlockType)arg1;
- (void)network_hydrateRequest:(CDUnknownBlockType)arg1;
- (void)network_validateOriginalRequest:(CDUnknownBlockType)arg1;
- (void)network_prepareWithPreparationSelectorIndex:(unsigned long long)arg1;
- (_Bool)network_isPreparing;
- (_Bool)network_hasFailedOrFinished;
- (_Bool)network_hasFailed;
- (_Bool)network_isStateActive;
- (_Bool)network_isStateCancelled;
- (_Bool)network_isStateFinished;
- (void)clearTag:(id)arg1;
- (void)updateTag:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

