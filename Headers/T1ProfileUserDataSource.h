//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import <T1Twitter/T1ProfileDataSource-Protocol.h>

@class NSArray, NSMutableSet, NSNumber, NSString, TFNTwitterAccount, TFNTwitterQuickPromoteModule, TFNTwitterStatus, TFNTwitterUserDataSource, TFSTwitterEntitySet, TFSTwitterEntityURL, TFSTwitterPaginatedResults, TFSTwitterPlace, TFSTwitterUserExtendedProfile, UIColor;
@protocol TFNTwitterStatusSocialContext;

@interface T1ProfileUserDataSource : NSObject <T1ProfileDataSource>
{
    _Bool _forOwnProfile;
    double _lastRefreshTime;
    _Bool _loadedOnce;
    _Bool _hasRequestedGenericUserRecommendations;
    _Bool _hasRequestedClusterFollowRecommendations;
    long long _lastError;
    _Bool _isUserInvalid;
    _Bool _userLoading;
    _Bool _userRelationshipLoading;
    _Bool _observingAccountNotifications;
    _Bool _observingUserNotifications;
    _Bool _requestingWTFUserRecommendations;
    _Bool _suspendedAccount;
    _Bool _needsExtendedProfileUpdate;
    _Bool _isLoadingPinnedTweet;
    TFNTwitterUserDataSource *_userDataSource;
    NSArray *_userRecommendations;
    TFNTwitterQuickPromoteModule *_quickPromoteModule;
    id <TFNTwitterStatusSocialContext> _socialContext;
    TFNTwitterAccount *_viewerAccount;
    NSArray *_clusterFollowRecommendations;
    NSMutableSet *_recommendationsScheduledForReplenish;
    NSString *_profileBannerURL;
    TFNTwitterStatus *_pinnedTweet;
    TFSTwitterPaginatedResults *_friendsFollowing;
    unsigned long long _friendsFollowingTotalCount;
}

@property(nonatomic) unsigned long long friendsFollowingTotalCount; // @synthesize friendsFollowingTotalCount=_friendsFollowingTotalCount;
@property(copy, nonatomic) TFSTwitterPaginatedResults *friendsFollowing; // @synthesize friendsFollowing=_friendsFollowing;
@property(retain, nonatomic) TFNTwitterStatus *pinnedTweet; // @synthesize pinnedTweet=_pinnedTweet;
@property(nonatomic) _Bool isLoadingPinnedTweet; // @synthesize isLoadingPinnedTweet=_isLoadingPinnedTweet;
@property(nonatomic) _Bool needsExtendedProfileUpdate; // @synthesize needsExtendedProfileUpdate=_needsExtendedProfileUpdate;
@property(nonatomic, getter=isSuspendedAccount) _Bool suspendedAccount; // @synthesize suspendedAccount=_suspendedAccount;
@property(nonatomic, getter=isRequestingWTFUserRecommendations) _Bool requestingWTFUserRecommendations; // @synthesize requestingWTFUserRecommendations=_requestingWTFUserRecommendations;
@property(nonatomic, getter=isObservingUserNotifications) _Bool observingUserNotifications; // @synthesize observingUserNotifications=_observingUserNotifications;
@property(nonatomic, getter=isObservingAccountNotifications) _Bool observingAccountNotifications; // @synthesize observingAccountNotifications=_observingAccountNotifications;
@property(nonatomic, getter=isUserRelationshipLoading) _Bool userRelationshipLoading; // @synthesize userRelationshipLoading=_userRelationshipLoading;
@property(nonatomic, getter=isUserLoading) _Bool userLoading; // @synthesize userLoading=_userLoading;
@property(copy, nonatomic) NSString *profileBannerURL; // @synthesize profileBannerURL=_profileBannerURL;
@property(nonatomic) _Bool isUserInvalid; // @synthesize isUserInvalid=_isUserInvalid;
@property(retain, nonatomic) NSMutableSet *recommendationsScheduledForReplenish; // @synthesize recommendationsScheduledForReplenish=_recommendationsScheduledForReplenish;
@property(copy, nonatomic) NSArray *clusterFollowRecommendations; // @synthesize clusterFollowRecommendations=_clusterFollowRecommendations;
@property(readonly, nonatomic) TFNTwitterAccount *viewerAccount; // @synthesize viewerAccount=_viewerAccount;
@property(retain, nonatomic) id <TFNTwitterStatusSocialContext> socialContext; // @synthesize socialContext=_socialContext;
@property(retain, nonatomic) TFNTwitterQuickPromoteModule *quickPromoteModule; // @synthesize quickPromoteModule=_quickPromoteModule;
@property(copy, nonatomic) NSArray *userRecommendations; // @synthesize userRecommendations=_userRecommendations;
@property(readonly, nonatomic) TFNTwitterUserDataSource *userDataSource; // @synthesize userDataSource=_userDataSource;
- (void).cxx_destruct;
- (void)_userDidUpdate:(id)arg1;
- (void)_userDataSourceDidUpdate:(id)arg1;
- (void)_userDidUpdateBlocking:(id)arg1;
- (void)_userDidUpdateUnpinnedTweet:(id)arg1;
- (void)_userDidUpdatePinnedTweet:(id)arg1;
- (void)_recommendedUserDidUpdate:(id)arg1;
- (void)_followerRequestAccepted:(id)arg1;
- (void)_teamsInvitationDidUpdate:(id)arg1;
- (void)_followerRequestsDidUpdate:(id)arg1;
- (void)_accountDidUpdateSettings:(id)arg1;
- (void)_accountDidUpdateBlocking:(id)arg1;
- (void)_accountDidUpdate:(id)arg1;
- (void)_accountDidUnfollowUser:(id)arg1;
- (void)_startObservingUserNotifications;
- (void)_startObservingAccountNotifications;
- (void)_requestQuickPromoteModuleIfNeeded;
- (void)_sendRequestsForPartialOrOutdatedUserForced:(_Bool)arg1;
- (void)_sendRequestsForUpToDateUser;
- (void)_receiveRecommendationsForUsersSimilarToUserResponseWithRecommendationType:(unsigned long long)arg1 success:(_Bool)arg2 result:(id)arg3 error:(id)arg4;
- (long long)_userProfileRequestErrorForError:(id)arg1;
- (void)_requestUserForced:(_Bool)arg1;
- (void)_requestRelationshipLookupForUsers:(id)arg1 invalidatingWithReason:(long long)arg2;
- (void)_sendFriendsFollowingRequestIfNeeded;
- (void)_sendExtendedProfileRequestIfNeeded;
- (void)_requestExtraProfileDataIfNeeded;
- (void)_requestReplacementForRecommendation:(id)arg1 recommendationType:(unsigned long long)arg2;
- (void)_requestRecommendationsForUsersSimilarToUserID:(id)arg1 username:(id)arg2 recommendationType:(unsigned long long)arg3 exclusionIDs:(id)arg4;
- (id)_exclusionIDsForRecommendations:(id)arg1;
- (void)_scheduleOrUnscheduleReplacementForRecommendation:(id)arg1 recommendationType:(unsigned long long)arg2;
- (_Bool)_shouldReload;
- (void)_loadDataForced:(_Bool)arg1;
- (void)_invalidateForReason:(long long)arg1;
@property(readonly, nonatomic) NSString *loadingErrorMessage;
- (void)invalidateDataForced:(_Bool)arg1;
- (void)invalidateData;
- (void)requestClusterFollowRecommendationsIfNeeded;
- (void)reloadRelationship;
- (void)_updatePinnedTweetIfNeeded;
@property(readonly, nonatomic) NSNumber *teamsInvitationCount;
@property(readonly, nonatomic) NSNumber *unreadFollowerRequestCount;
@property(readonly, nonatomic) NSNumber *followingCount;
@property(readonly, nonatomic) NSNumber *followerCount;
@property(readonly, nonatomic) NSNumber *favoriteTweetCount;
@property(readonly, nonatomic) NSNumber *mediaTweetCount;
@property(readonly, nonatomic) NSNumber *tweetCount;
@property(readonly, nonatomic) _Bool viewerCanDM;
@property(readonly, nonatomic) _Bool hasFollowRequest;
@property(readonly, nonatomic, getter=isContentWithheldForViewerCountry) _Bool contentWithheldForViewerCountry;
@property(readonly, nonatomic, getter=isViewerLiveFollowing) _Bool viewerLiveFollowing;
@property(readonly, nonatomic, getter=isViewerDeviceFollowing) _Bool viewerDeviceFollowing;
@property(readonly, nonatomic, getter=isTwitterAlertsActivatedByViewer) _Bool twitterAlertsActivatedByViewer;
@property(readonly, nonatomic, getter=isMutedByViewer) _Bool mutedByViewer;
@property(readonly, nonatomic) unsigned long long blockingViewerRelationshipState;
@property(readonly, nonatomic, getter=isBlockedByViewer) _Bool blockedByViewer;
@property(readonly, nonatomic, getter=isFollowedByViewer) _Bool followedByViewer;
@property(readonly, nonatomic, getter=isFollowingViewer) _Bool followingViewer;
@property(readonly, nonatomic, getter=isUserRelationshipReady) _Bool userRelationshipReady;
@property(readonly, nonatomic, getter=isDataReady) _Bool dataReady;
@property(readonly, nonatomic) _Bool needsSetup;
@property(readonly, nonatomic, getter=isTwitterAlertsInstitution) _Bool twitterAlertsInstitution;
@property(readonly, nonatomic) long long interstitialType;
@property(readonly, nonatomic, getter=isProtectedAccount) _Bool protectedAccount;
@property(readonly, nonatomic, getter=isVerifiedAccount) _Bool verifiedAccount;
@property(readonly, nonatomic, getter=isViewingOwnProfile) _Bool viewingOwnProfile;
@property(readonly, nonatomic) UIColor *profileLinkColor;
@property(readonly, nonatomic) TFSTwitterUserExtendedProfile *extendedProfile;
@property(readonly, nonatomic) TFSTwitterEntityURL *entityURL;
@property(readonly, copy, nonatomic) NSString *url;
@property(readonly, nonatomic) TFSTwitterEntitySet *withheldBioEntities;
@property(readonly, copy, nonatomic) NSString *withheldBio;
@property(readonly, nonatomic) TFSTwitterEntitySet *bioEntities;
@property(readonly, copy, nonatomic) NSString *bio;
@property(readonly, nonatomic) TFSTwitterPlace *structuredLocation;
@property(readonly, copy, nonatomic) NSString *location;
@property(readonly, copy, nonatomic) NSString *fullName;
@property(readonly, copy, nonatomic) NSString *username;
@property(readonly, copy, nonatomic) NSString *displayUsername;
- (id)initWithUser:(id)arg1 orUserReference:(id)arg2 viewerAccount:(id)arg3 forOwnProfile:(_Bool)arg4;
- (id)initOwnProfileDataSourceWithAccount:(id)arg1;
- (id)initWithUserReference:(id)arg1 viewerAccount:(id)arg2;
- (id)initWithUser:(id)arg1 viewerAccount:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

