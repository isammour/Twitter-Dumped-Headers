//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <PeriscopeViewer/PTVVideoViewController.h>

#import <PeriscopeViewer/PTVCADisplayLinkWeakTargetDelegate-Protocol.h>

@class AVPlayer, AVPlayerItem, AVPlayerItemVideoOutput, CADisplayLink, NSDate, NSDictionary, NSMutableArray, NSMutableDictionary, NSString, NSTimer, NSURL, PTVAudioSession, PTVStdDevStats;

@interface PTVAVPlayerVideoViewController : PTVVideoViewController <PTVCADisplayLinkWeakTargetDelegate>
{
    PTVAVPlayerVideoViewController *_weakSelf;
    NSDate *_pausedAt;
    NSDate *_datePlayerBeganBuffering;
    double _timeRequiredToBufferInitialVideo;
    int _stalls;
    _Bool _isPlaying;
    _Bool _observingPlayerObjects;
    _Bool _isNewAVPlayer;
    _Bool _isInPlayState;
    _Bool _isStalled;
    _Bool _hasReceivedRotation;
    _Bool _isTranscoded;
    NSDate *_playbackStartDate;
    double _timeToFirstFrame;
    double _durationWatched;
    NSDate *_playIntervalStartDate;
    PTVStdDevStats *_latencyAve;
    PTVStdDevStats *_bitrateAve;
    int _currentBitrate;
    NSDate *_currentBitrateStartTime;
    NSMutableDictionary *_bitrateDurations;
    NSMutableArray *_accessLogTimestamps;
    PTVAudioSession *_audioSession;
    CDStruct_1b6d18a9 _pendingSeekTime;
    CDUnknownBlockType _pendingSeekCompletionBlock;
    int _numTimesTriedToSeekToNTP;
    CDUnknownBlockType _pendingNTPSeekCompletionBlock;
    _Bool _isObservingBroadcast;
    _Bool _isPlayingLiveVideo;
    _Bool _shouldAutoPlay;
    _Bool _playAudio;
    _Bool _shouldManuallyControlAVAudioSessionActiveState;
    _Bool _allowsExternalPlayback;
    _Bool _currentlySeekingToNTPTime;
    _Bool _endPending;
    _Bool _shouldCheckNTPSeekingSuccessOnNTPMetadata;
    NSURL *_contentURL;
    NSDictionary *_metadata;
    AVPlayer *_avPlayer;
    AVPlayerItem *_avPlayerItem;
    double _duration;
    unsigned long long _ntpToSeekTo;
    AVPlayerItemVideoOutput *_avPlayerItemVideoOutput;
    NSTimer *_rebuildStackTimer;
    NSTimer *_stallWatchingTimer;
    long long _avPlayerFailedBackOffInterval;
    NSDate *_timeAtNTP;
    double _clockNTP;
    double _videoTimeToSeekToOnPlay;
    CADisplayLink *_displayLink;
    struct __CVBuffer *_videoFrameBuffer;
    unsigned long long _videoFrameBufferID;
}

@property(nonatomic) unsigned long long videoFrameBufferID; // @synthesize videoFrameBufferID=_videoFrameBufferID;
@property(nonatomic) struct __CVBuffer *videoFrameBuffer; // @synthesize videoFrameBuffer=_videoFrameBuffer;
@property(retain, nonatomic) CADisplayLink *displayLink; // @synthesize displayLink=_displayLink;
@property(nonatomic) double videoTimeToSeekToOnPlay; // @synthesize videoTimeToSeekToOnPlay=_videoTimeToSeekToOnPlay;
@property(nonatomic) _Bool shouldCheckNTPSeekingSuccessOnNTPMetadata; // @synthesize shouldCheckNTPSeekingSuccessOnNTPMetadata=_shouldCheckNTPSeekingSuccessOnNTPMetadata;
@property(nonatomic) double clockNTP; // @synthesize clockNTP=_clockNTP;
@property(retain, nonatomic) NSDate *timeAtNTP; // @synthesize timeAtNTP=_timeAtNTP;
@property(nonatomic) long long avPlayerFailedBackOffInterval; // @synthesize avPlayerFailedBackOffInterval=_avPlayerFailedBackOffInterval;
@property(retain, nonatomic) NSTimer *stallWatchingTimer; // @synthesize stallWatchingTimer=_stallWatchingTimer;
@property(retain, nonatomic) NSTimer *rebuildStackTimer; // @synthesize rebuildStackTimer=_rebuildStackTimer;
@property(retain, nonatomic) AVPlayerItemVideoOutput *avPlayerItemVideoOutput; // @synthesize avPlayerItemVideoOutput=_avPlayerItemVideoOutput;
@property(nonatomic) _Bool endPending; // @synthesize endPending=_endPending;
@property(readonly, nonatomic) unsigned long long ntpToSeekTo; // @synthesize ntpToSeekTo=_ntpToSeekTo;
@property(readonly, nonatomic) _Bool currentlySeekingToNTPTime; // @synthesize currentlySeekingToNTPTime=_currentlySeekingToNTPTime;
@property(nonatomic) _Bool allowsExternalPlayback; // @synthesize allowsExternalPlayback=_allowsExternalPlayback;
@property(nonatomic) _Bool shouldManuallyControlAVAudioSessionActiveState; // @synthesize shouldManuallyControlAVAudioSessionActiveState=_shouldManuallyControlAVAudioSessionActiveState;
@property(nonatomic) _Bool playAudio; // @synthesize playAudio=_playAudio;
@property(readonly, nonatomic) double duration; // @synthesize duration=_duration;
@property(nonatomic) _Bool shouldAutoPlay; // @synthesize shouldAutoPlay=_shouldAutoPlay;
@property(nonatomic) _Bool isPlayingLiveVideo; // @synthesize isPlayingLiveVideo=_isPlayingLiveVideo;
@property(retain, nonatomic) AVPlayerItem *avPlayerItem; // @synthesize avPlayerItem=_avPlayerItem;
@property(retain, nonatomic) AVPlayer *avPlayer; // @synthesize avPlayer=_avPlayer;
@property(readonly) NSDictionary *metadata; // @synthesize metadata=_metadata;
@property(retain, nonatomic) NSURL *contentURL; // @synthesize contentURL=_contentURL;
- (void).cxx_destruct;
- (void)endAudioSession;
- (void)beginAudioSessionIfNeeded;
- (void)broadcastEndPending;
- (void)didReachEndOfVideo;
- (void)destroyVideoStack;
- (void)startRebuildTimer;
- (void)startStallWatchingTimer;
- (void)gotNewPlayerItemLogs;
- (void)failedToPlayToEnd;
- (void)onPlaybackLikelyToKeepUpChange;
- (void)onSizeChange;
- (void)onDurationChange;
- (void)didChangePlayerStatus;
- (void)onRateChange;
- (void)onPlaybackStart;
- (void)stallEnded;
- (void)onNewStall;
- (void)onChangeToTimeControlStatus;
- (void)cancelNTPSeekingWillSeekAgain:(_Bool)arg1;
- (void)completeNTPSeeking;
- (void)checkIfNTPSeekingWasSuccessfulOrTryAgain;
- (void)seekToNTPTime:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)didCompleteSeekToCMTime:(CDStruct_1b6d18a9)arg1 fromCMTime:(CDStruct_1b6d18a9)arg2;
- (void)doSeekToCMTime:(CDStruct_1b6d18a9)arg1 completion:(CDUnknownBlockType)arg2;
- (void)cancelPendingSeekIfNeeded;
- (void)performPendingSeekIfNeeded;
- (_Bool)hasPendingSeek;
- (void)seekToCMTime:(CDStruct_1b6d18a9)arg1 completion:(CDUnknownBlockType)arg2;
- (void)seekToTimeInterval:(double)arg1 completion:(CDUnknownBlockType)arg2;
- (void)seekToLivePositionWithCompletion:(CDUnknownBlockType)arg1;
- (void)pause;
- (_Bool)play;
- (void)avPlayerItemStatusDidChange;
- (void)playbackBufferEmptyDidChange;
- (void)determineAVPlayerState;
- (void)playerMetaDataReceived;
- (void)audioState;
- (void)setCurrentlySeekingToNTPTime:(_Bool)arg1;
- (void)_checkSendReadyForDisplay;
- (void)_setMetaData:(id)arg1;
- (void)setDuration:(double)arg1;
- (void)_setupVideoStackUsingAVPLayer:(id)arg1;
- (void)createVideoStackFromAVPLayer:(id)arg1;
@property(readonly, nonatomic) _Bool displayProvidedBitrate;
- (_Bool)isPlayingOrTryingToPlay;
- (_Bool)playerRateGreaterThanZero;
- (_Bool)isCurrentlyStalled;
- (id)currentAVPlayer;
- (id)getStatistics;
@property(readonly, nonatomic) double currentPlaybackTime;
- (id)renderTimeForNTP:(unsigned long long)arg1;
- (unsigned long long)ntpForCurrentFrame;
@property(readonly, nonatomic) unsigned long long videoStatus;
- (id)avPlayerVideoViewControllerDelegate;
- (_Bool)shouldCaptureStillImageOfVideoPlayer;
- (id)init;
- (void)resetStats;
- (void)setBroadcast:(id)arg1;
- (_Bool)hasReceivedVideoRotation;
- (_Bool)shouldShowVideo;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)loadView;
- (void)displayLinkDidFire:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (void)unobserveBroadcast;
- (void)observeBroadcast;
- (void)unobserveAVPlayerObjects;
- (void)observeAVPlayerObjects;
- (_Bool)_observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

