//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class AVAssetWriter, AVAssetWriterInput, NSDate, NSMutableArray, NSURL;
@protocol OS_dispatch_queue, PTVFileRecordDelegate;

@interface PTVRecordToFile : NSObject
{
    NSMutableArray *_clips;
    NSURL *_currentURL;
    AVAssetWriter *_localRecording;
    AVAssetWriterInput *_recordingVideo;
    AVAssetWriterInput *_recordingAudio;
    struct opaqueCMFormatDescription *_audioEncoderFormat;
    struct opaqueCMBufferQueue *_audioBuffers;
    struct opaqueCMBufferQueue *_videoBuffers;
    NSObject<OS_dispatch_queue> *_recordingQueue;
    _Bool _firstAudio;
    _Bool _firstVideo;
    NSDate *_spaceCheck;
    _Bool _startNewClip;
    _Bool _flushWhileWaiting;
    CDStruct_1b6d18a9 _localVideoStartPresentationTimestamp;
    CDStruct_1b6d18a9 _localVideoRecordingTime;
    _Bool _didSendLocalVideoRecordingTimeMessage;
    _Bool hasAudio;
    _Bool hasVideo;
    _Bool _isRecording;
    int _audioFrequency;
    id <PTVFileRecordDelegate> _delegate;
    double _freeSpaceLimitinMB;
}

+ (void)recoverOrphanedClips;
+ (id)discoveredClips;
+ (void)emptyClipsFolder;
+ (id)clipsFolder;
+ (_Bool)combineClips:(id)arg1 output:(id)arg2 onCompletion:(CDUnknownBlockType)arg3;
+ (void)combineClips:(id)arg1 saveToCameraRoll:(CDUnknownBlockType)arg2;
@property _Bool isRecording; // @synthesize isRecording=_isRecording;
@property int audioFrequency; // @synthesize audioFrequency=_audioFrequency;
@property double freeSpaceLimitinMB; // @synthesize freeSpaceLimitinMB=_freeSpaceLimitinMB;
@property __weak id <PTVFileRecordDelegate> delegate; // @synthesize delegate=_delegate;
@property _Bool hasVideo; // @synthesize hasVideo;
@property _Bool hasAudio; // @synthesize hasAudio;
- (void).cxx_destruct;
- (void)deleteSavedClips;
- (void)combineAndSaveToCameraRoll:(CDUnknownBlockType)arg1;
- (_Bool)canSaveToCameraRoll;
- (double)videoDuration;
- (void)append:(struct opaqueCMSampleBuffer *)arg1 toInput:(id)arg2 isVideo:(_Bool)arg3;
- (_Bool)feedQueue:(id)arg1 isVideo:(_Bool)arg2;
- (void)doWriteRecording:(id)arg1 sample:(struct opaqueCMSampleBuffer *)arg2 toVideo:(_Bool)arg3 time:(double)arg4 decode:(double)arg5;
- (_Bool)hasEmptyRecording;
- (double)getFreeSpaceInMB;
- (_Bool)checkFreeSpace;
- (void)finishClipWithCompletionHandler:(CDUnknownBlockType)arg1;
- (_Bool)checkVideoForIDR:(id)arg1;
- (void)createRecorder:(CDStruct_1b6d18a9)arg1;
- (void)startNewClipWithFlush:(_Bool)arg1;
- (void)writeRecording:(id)arg1 sample:(struct opaqueCMSampleBuffer *)arg2 toVideo:(_Bool)arg3 time:(double)arg4 decode:(double)arg5;
- (id)getClipURLs;
- (void)finishRecordingWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)startRecording;
- (void)setAudioEncoderFormat:(struct opaqueCMFormatDescription *)arg1;
- (id)init;
- (void)dealloc;

@end

