//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSArray, NSMutableDictionary, TNLCommunicationAgent;
@protocol OS_dispatch_queue, TNLHostSanitizer, TNLLogger;

@interface TNLGlobalConfiguration : NSObject
{
    unsigned long long _nextBackgroundTaskIdentifier;
    NSMutableDictionary *_runningBackgroundTasks;
    NSObject<OS_dispatch_queue> *_backgroundTaskQueue;
    NSArray *_authHandlers;
    unsigned long long _sharedUIApplicationBackgroundTaskIdentifier;
    _Bool _shouldForceCrashOnCloggedCallback;
    id <TNLHostSanitizer> _hostSanitizer;
    TNLCommunicationAgent *_metricProvidingCommunicationAgent;
    long long _operationAutomaticDependencyPriorityThreshold;
    double _requestOperationCallbackTimeout;
    long long _idleTimeoutMode;
    double _timeoutIntervalBetweenDataTransfer;
    NSObject<OS_dispatch_queue> *_configurationQueue;
    id <TNLLogger> _internalLogger;
    long long _lastApplicationState;
}

+ (id)sharedInstance;
+ (id)version;
@property long long lastApplicationState; // @synthesize lastApplicationState=_lastApplicationState;
@property(retain) id <TNLLogger> internalLogger; // @synthesize internalLogger=_internalLogger;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *configurationQueue; // @synthesize configurationQueue=_configurationQueue;
@property(nonatomic) double timeoutIntervalBetweenDataTransfer; // @synthesize timeoutIntervalBetweenDataTransfer=_timeoutIntervalBetweenDataTransfer;
@property(nonatomic) long long idleTimeoutMode; // @synthesize idleTimeoutMode=_idleTimeoutMode;
@property _Bool shouldForceCrashOnCloggedCallback; // @synthesize shouldForceCrashOnCloggedCallback=_shouldForceCrashOnCloggedCallback;
@property(nonatomic) double requestOperationCallbackTimeout; // @synthesize requestOperationCallbackTimeout=_requestOperationCallbackTimeout;
@property(nonatomic) long long operationAutomaticDependencyPriorityThreshold; // @synthesize operationAutomaticDependencyPriorityThreshold=_operationAutomaticDependencyPriorityThreshold;
@property(retain) TNLCommunicationAgent *metricProvidingCommunicationAgent; // @synthesize metricProvidingCommunicationAgent=_metricProvidingCommunicationAgent;
@property(retain) id <TNLHostSanitizer> hostSanitizer; // @synthesize hostSanitizer=_hostSanitizer;
- (void).cxx_destruct;
- (void)private_handleExpiration;
- (void)private_bgTask_cleanUpSharedBackgroundTaskIfNecessary;
- (void)private_bgTask_ensureSharedBackgroundTask;
- (void)endBackgroundTaskWithIdentifier:(unsigned long long)arg1;
- (unsigned long long)startBackgroundTaskWithName:(id)arg1 expirationHandler:(CDUnknownBlockType)arg2;
@property(readonly, copy) NSArray *internalAuthenticationChallengeHandlers;
- (void)removeAuthenticationChallengeHandler:(id)arg1;
- (void)addAuthenticationChallengeHandler:(id)arg1;
@property(nonatomic, getter=areAssertsEnabled) _Bool assertsEnabled;
@property(retain) id <TNLLogger> logger;
@property long long serviceUnavailableBackoffMode;
- (id)allHeaderProviders;
- (void)removeHeaderProvider:(id)arg1;
- (void)addHeaderProvider:(id)arg1;
- (id)allNetworkObservers;
- (void)removeNetworkObserver:(id)arg1;
- (void)addNetworkObserver:(id)arg1;
- (void)_tnl_applicationDidEnterBackground:(id)arg1;
- (void)_tnl_applicationDidBecomeActive:(id)arg1;
- (void)_tnl_applicationWillEnterForeground:(id)arg1;
- (void)_tnl_applicationWillResignActive:(id)arg1;
- (void)_tnl_applicationDidFinishLaunching:(id)arg1;
- (id)initInternal;
- (id)init;
- (id)allRequestOperations;

@end

